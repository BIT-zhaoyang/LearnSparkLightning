Overview:
0. Convert to Pair RDD.
1. Basic usage of Key/Value pairs.
2. Advanced feature of using partitioning.

1. Creating Pair RDDs
Creating Pair RDDs is in fact easy. We just need to create a RDD composed of
tuples. Python and Scala have builtin tuple type, however, Java doesn't.
Instead, Java use the scala.Tuple2 class. This class provides ._1() and ._2()
functions to access its elements.

If we have a regular RDD. We can get a Pair RDD by using the map() function.
Remember from Chapter3, Java has an explicit specified RDD type, JavaPairRDD.
To create this special RDD, we need to use corresponding map function,
mapToPair(). One example is as follow:

PairFunction<String, String, String> keyData = 
    new PairFunction<String, String, String>() {
        public Tuple2<String, String> call(String x) {
            // use the first word as key
            return new Tuple2(x.split(" ")[0], x);
        }
    };
JavaPairRDD<String, String> pairs = lines.mapToPair(keyData);
    
2. Common Operations on Pair RDD
Pair RDD is still RDD. The special point is that, it composes of pairs(Tuple2
object in Java and Scala). It's not surprising Pair RDD supports common
operations defined for normal RDD.

For exmaple, to filter a Pair RDD, we can do as follow:
Function<Tuple2<String, String>, Boolean> longWordFilter = 
    new Function<Tuple2<String, String>, Boolean>() {
        public Boolean call(Tuple2<String, String> keyValue) {
            return (keyValue._2().length() < 20);
        }
    };
JavaPairRDD<String, String> result = pairs.filter(longWordFilter);


